#!/usr/bin/env ruby

require 'commander/import'
require 'time_log_robot'
require 'time_log_robot/version'
require 'time_log_robot/toggl/tagger'
require 'time_log_robot/toggl/report'
require 'time_log_robot/jira/issue_key_parser'
require 'time_log_robot/jira/payload_builder'
require 'time_log_robot/jira/work_logger'
require 'yaml'

program :name, 'time_log_robot'
program :version, TimeLogRobot::VERSION
program :description, 'Logs work from a time tracker tool to a project
management tool. Currently only supports Toggl and JIRA.'

program :help, 'Author', 'Mark J. Lehman <markopolo@gmail.com>'

global_option('-i', '--inputs_help', 'Learn how and where to find the inputs you need to get this working')

command :run do |c|
  c.syntax = 'time_log_robot run [options]'

  c.description = 'Logs your time with optional since (default is the previous Saturday).'

  c.example 'usage', 'time_log_robot run'
  c.example 'shorthand', 'time_log_robot'
  c.example 'with optional parameter "since"', 'time_log_robot run --since "2015-10-21"'

  c.option '--since STRING', String, 'The date from which to log time entries. Must be in YYYY-MM-DD format. Default is the previous Saturday.'

  c.option '--overwrite', 'Your settings are automatically written to a file - `~/.time_log_robot_settings.yml` - to be used again the next time you invoke the robot. Use this flag if you need to overwrite those settings.'

  c.action do |args, options|
    if options.inputs_help
      print_inputs_help
    else
      create_settings_file_if_nonexistent

      fetch_envars_from_config unless options.overwrite

      missing_envars = get_missing_envars

      since = DateTime.parse(options.since).to_s unless options.since.nil?

      TimeLogRobot.start(since)

      write_missing_envars(missing_envars) if missing_envars.any?
    end
  end
end

def print_inputs_help
  TimeLogRobot.envars_help.each_pair do |envar, help_text|
    puts envar
    puts help_text
  end
end

def get_missing_envars
  missing_envars = {}

  TimeLogRobot.envars.each do |key|
    string_key = key.to_s
    unless ENV[string_key]
      ENV[string_key] = ask "Enter your #{string_key}: " do |char|
        char.echo = '*' if string_key =~ /password|token/i
      end
      if ENV[string_key].length == 0
        puts 'Invalid input. This is a required field.'
        exit
      end
      missing_envars[string_key] = ENV[string_key]
    end
  end

  return missing_envars
end

def fetch_envars_from_config
  return unless envars = YAML.load_file(settings_file_path)
  envars.each_pair do |key, value|
    ENV[key.upcase] = value
  end
end

def write_missing_envars(missing_envars={})
  puts "\nTo avoid entering setup information each time, the following configuration has been stored in `#{settings_file_path}`:"
  missing_envars.each_pair do |key, value|
    if key =~ /password|token/i
      puts "\t#{key}=[FILTERED]"
    else
      puts "\t#{key}=#{value}"
    end

    data = YAML.load_file(settings_file_path) || {}
    data[key.downcase] = value
    File.open(settings_file_path, 'w') { |f| YAML.dump(data, f) }
  end
end

def create_settings_file_if_nonexistent
  File.new(settings_file_path, "w+") unless File.exists?(settings_file_path)
end

def settings_file_path
  File.join(TimeLogRobot.root, '.settings.yml')
end

# set default action for gem
default_command :run
